/**
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import{useRef as t,useMemo as a,useReducer as o,useEffect as e,useCallback as r}from"@googleforcreators/react";import{getTimeTracker as s}from"@googleforcreators/tracking";import c,{defaultStoriesState as y,ACTION_TYPES as S}from"../reducer/stories.js";import{ERRORS as p}from"../textContent/index.js";import"react";import"prop-types";import"../config/context.js";import E from"../config/useConfig.js";const d=()=>{const d=t(!0),i=a((()=>new Map),[]),[T,l]=o(c,y),{apiCallbacks:n}=E(),_=t(!1);e((()=>(_.current=!0,()=>{_.current=!1})),[]);const R=r((async t=>{l({type:S.LOADING_STORIES,payload:!0});const a=s("load_stories");try{const{stories:o,fetchedStoryIds:e,totalPages:r,totalStoriesByStatus:s}=await n.fetchStories(t);if(!_.current)return;d.current&&i.forEach((t=>{t(s)})),d.current=!1,l({type:S.FETCH_STORIES_SUCCESS,payload:{stories:o,totalPages:r,totalStoriesByStatus:s,fetchedStoryIds:e,page:t.page}})}catch(t){l({type:S.FETCH_STORIES_FAILURE,payload:{message:p.LOAD_STORIES.MESSAGE,code:t.code}})}finally{l({type:S.LOADING_STORIES,payload:!1}),a()}}),[n,i]),A=r((async t=>{const a=s("load_update_story");try{const o=await n.updateStory(t);l({type:S.UPDATE_STORY,payload:o})}catch(t){l({type:S.UPDATE_STORY_FAILURE,payload:{message:p.UPDATE_STORY.MESSAGE,code:t.code}})}finally{a()}}),[n]),O=r((async t=>{const a=s("load_trash_story");try{await n.trashStory(t.id),l({type:S.TRASH_STORY,payload:{id:t.id,storyStatus:t.status}})}catch(t){l({type:S.TRASH_STORY_FAILURE,payload:{message:p.DELETE_STORY.MESSAGE,code:t.code}})}finally{a()}}),[n]),m=r((async t=>{l({type:S.CREATING_STORY_FROM_TEMPLATE,payload:!0});try{const a=await n.createStoryFromTemplate(t);l({type:S.CREATE_STORY_FROM_TEMPLATE_SUCCESS}),window.location=a.editLink}catch(t){l({type:S.CREATE_STORY_FROM_TEMPLATE_FAILURE,payload:{message:p.CREATE_STORY_FROM_TEMPLATE.MESSAGE,code:t.code}})}finally{l({type:S.CREATING_STORY_FROM_TEMPLATE,payload:!1})}}),[n]);return{stories:T,api:{duplicateStory:r((async t=>{const a=s("load_duplicate_story");try{const o=await n.duplicateStory(t);l({type:S.DUPLICATE_STORY,payload:o})}catch(t){l({type:S.DUPLICATE_STORY_FAILURE,payload:{message:p.DUPLICATE_STORY.MESSAGE,code:t.code}})}finally{a()}}),[n]),fetchStories:R,createStoryFromTemplate:m,trashStory:O,updateStory:A,addInitialFetchListener:r((t=>{const a=Symbol();return i.set(a,t),()=>{i.delete(a)}}),[i])}}};export{d as default};
