/**
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import e from"react";import"prop-types";import{getFontCSS as t,getGoogleFontURL as r}from"@googleforcreators/fonts";import{getFontVariants as o}from"@googleforcreators/rich-text";import"@googleforcreators/elements";const n=(e,t)=>e.some((e=>e[0]===t[0]&&e[1]===t[1])),s=(e,t)=>Math.abs(e[0]+e[1]-t[0]-t[1]),a=(e,t)=>e.reduce(((e,r)=>s(r,t)<s(e,t)?r:e));function FontDeclarations(s){let{pages:l}=s;const c=new Map;for(const{elements:e}of l){const t=e.filter((e=>{let{type:t}=e;return"text"===t}));for(const{font:e,content:r}of t){const{service:t,family:s,variants:l=[],url:f}=e;if(!t||"system"===t)continue;const m=c.get(t)||new Map;c.set(t,m);const i=m.get(s)||{family:s,variants:[],url:f},u=o(r);if(l.length>0)for(const e of u){const t=a(l,e),r=n(i.variants,t),o=n(l,t);!r&&o&&i.variants.push(t)}m.set(s,i)}}return e.createElement(e.Fragment,null,Array.from(c.keys()).map((o=>{const n=c.get(o);switch(o){case"fonts.google.com":return e.createElement("link",{key:o,href:r(Array.from(n.values())),rel:"stylesheet"});case"custom":return Array.from(n.values()).map((r=>{let{family:o,url:n}=r;const s=t(o,n);return e.createElement("style",{key:o,dangerouslySetInnerHTML:{__html:s}})}));default:return null}})))}export{FontDeclarations as default};
