/**
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import{EditorState as t,Modifier as e}from"draft-js";import{NONE as n}from"./customConstants.js";import{getAllStyleSetsInSelection as r}from"./draftUtils.js";function l(t,e){const r=t.toArray().map((t=>t.style??t)),l=t=>t&&t.startsWith(e);return r.some(l)?r.find(l):n}function o(t,e){const n=t.getSelection(),o=r(t);if(n.isCollapsed()||0===o.length)return[l(t.getCurrentInlineStyle(),e)];const i=new Set;return o.forEach((t=>i.add(l(t,e)))),[...i]}function i(e,n){return t.push(e,n,"change-inline-style")}function s(r,s){let c=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,u=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;if(r.getSelection().isCollapsed()){let e=r.getCurrentInlineStyle();const o=l(e,s);o!==n&&(e=e.remove(o));if(c?c([o]):o===n){const t=u?u([o]):s;e=e.add(t)}return t.setInlineStyleOverride(r,e)}const f=o(r,s),d=f.filter((t=>t!==n)),a=d.reduce(((t,n)=>e.removeInlineStyle(t,r.getSelection(),n)),r.getCurrentContent()),g=c?c(f):f.includes(n);if(!g)return i(r,a);const m=u?u(f):s,p=e.applyInlineStyle(a,r.getSelection(),m);return i(r,p)}export{l as getPrefixStyleForCharacter,o as getPrefixStylesInSelection,s as togglePrefixStyle};
