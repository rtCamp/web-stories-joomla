/**
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import{DONE_TIP_ENTRY as n}from"../../../components/helpCenter/constants.js";const i=(n,i)=>i.navigationIndex<0,e=(n,i)=>{const e=!n.isOpen&&i.isOpen,t=!n.isOpeningToTip&&i.isOpeningToTip;return{navigationIndex:e&&!t?-1:i.navigationIndex}},t=(n,e)=>({hasBottomNavigation:!i(0,e)}),o=(n,e)=>({isLeftToRightTransition:!i(0,e)&&e.navigationIndex-n.navigationIndex>0}),r=(n,i)=>({isPrevDisabled:i.navigationIndex<=0,isNextDisabled:i.navigationIndex>=i.navigationFlow?.length-1}),a=(n,e)=>{const t=!i(0,e)&&((n,i)=>(i.navigationFlow||[]).filter((n=>i.tipKeys.includes(n))))(0,e)?.[e.navigationIndex];return{readTips:t?{...e.readTips,[t]:!0}:e.readTips}},s=(i,e)=>{if(!((n,i)=>n.navigationIndex<0&&i.navigationIndex>=0)(i,e))return{};const t=e.tipKeys.slice(0,e.navigationIndex).filter((n=>!e.readTips[n]));return{navigationFlow:[...e.tipKeys,...t,n[0]]}};function u(n,i){return{unreadTipsCount:i.tipKeys.filter((n=>!i.readTips[n]))?.length||0}}function p(n,i){if("undefined"!=typeof WEB_STORIES_DISABLE_QUICK_TIPS&&"true"===WEB_STORIES_DISABLE_QUICK_TIPS)return{};if(((n,i)=>!n.isHydrated&&i.isHydrated)(n,i)){return n.unreadTipsCount<i.unreadTipsCount?{isOpen:!0}:{}}return{}}function d(n){if("undefined"!=typeof WEB_STORIES_DISABLE_QUICK_TIPS&&"true"===WEB_STORIES_DISABLE_QUICK_TIPS)return{};return Boolean(n?.unreadTipsCount)&&void 0!==n?.isOpen?{isOpen:n?.isOpen}:{}}function T(n){return n?.unreadTipsCount?{unreadTipsCount:n?.unreadTipsCount}:{}}function I(n,i){return{isOpeningToTip:i.isOpeningToTip&&!n.isOpeningToTip}}const g=function(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];return(i,e)=>n.reduce(((n,t)=>({...e,...n,...t(i,n)})),e)};export{g as composeEffects,s as createDynamicNavigationFlow,p as deriveAutoOpen,t as deriveBottomNavigation,r as deriveDisabledButtons,d as deriveInitialOpen,T as deriveInitialUnreadTipsCount,a as deriveReadTip,o as deriveTransitionDirection,u as deriveUnreadTipsCount,I as resetIsOpeningToTip,e as resetNavigationIndexOnOpen};
