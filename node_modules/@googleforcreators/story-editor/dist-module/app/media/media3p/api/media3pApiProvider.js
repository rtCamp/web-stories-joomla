/**
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import r from"react";import"prop-types";import"@googleforcreators/media";import"uuid";import"../../../../constants/fonts.js";import"../../../../constants/multipleValue.js";import e from"../../utils/getResourceFromMedia3p.js";import"@googleforcreators/react";import"@googleforcreators/tracking";import"@googleforcreators/i18n";import"@googleforcreators/templates";import"../../../config/context.js";import"../../../api/context.js";import"@googleforcreators/animation";import"@googleforcreators/masks";import"@googleforcreators/element-library";import"@googleforcreators/elements";import"../../../story/context.js";import"@googleforcreators/migration";import"../../../history/historyProvider.js";import"../../../history/context.js";import"../../../story/actions/useSaveStory.js";import"clone-deep";import"../../../story/useStoryReducer/useStoryReducer.js";import"@googleforcreators/output";import"../../../story/storyTriggers/storyTriggersProvider.js";import"../../../story/storyTriggers/storyEvents/onInitialElementAddedRegister.js";import"../../../story/storyTriggers/storyEvents/onPageAddedRegister.js";import"../../utils/useFFmpeg.js";import{PROVIDERS as o}from"../providerConfiguration.js";import t from"./apiFetcher.js";import i from"./context.js";function Media3pApiProvider(s){let{children:a}=s;function n(r){let{provider:e,contentType:t,searchTerm:i,categoryId:s}=r;if(!Object.keys(o).includes(e))throw new Error(`Unsupported provider: ${e}`);if(s&&i)throw new Error("searchTerm and categoryId are mutually exclusive.");return[`provider:${e}`,t&&`type:${t}`,s&&`category:${s}`,i].filter(Boolean).join(" ")}const p={actions:{listMedia:async function(r){let{provider:o,filter:i,orderBy:s,pageToken:a}=r;const{contentType:p,searchTerm:g,categoryId:m}=i??{},c=await t.listMedia({filter:n({provider:o,contentType:p,searchTerm:g,categoryId:m}),orderBy:s,pageSize:20,pageToken:a});return{media:(c.media||[]).map(e),nextPageToken:c.nextPageToken}},listCategories:async function(r){let{provider:e,orderBy:o}=r;const i=n({provider:e});return{categories:(await t.listCategories({filter:i,orderBy:o})).categories.map((r=>({id:r.name,label:r.displayName})))}},registerUsage:async function(r){let{registerUsageUrl:e}=r;await t.registerUsage({registerUsageUrl:e})}}};return r.createElement(i.Provider,{value:p},a)}export{Media3pApiProvider as default};
