/**
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import{useRef as e,useEffect as r,useCallback as o}from"@googleforcreators/react";import{__}from"@googleforcreators/i18n";import{LOCAL_STORAGE_PREFIX as s,useSnackbar as i,localStore as t}from"@googleforcreators/design-system";import n from"../../utils/usePreventWindowUnload.js";import a from"../uploader/useUploader.js";import d from"./utils/useMediaUploadQueue/index.js";import c from"./utils/getResourceFromLocalFile.js";import u from"./utils/useFFmpeg.js";const l=s.VIDEO_OPTIMIZATION_DIALOG_DISMISSED;function m(s){let{media:m,prependMedia:g,updateMediaElement:p,deleteMediaElement:f}=s;const{actions:{validateFileForUpload:R}}=a(),{showSnackbar:U}=i(),T=n(),{state:{isUploading:I,isTranscoding:w,pending:F,progress:M,uploaded:P,failures:C,finished:E,isNewResourceProcessing:S,isCurrentResourceProcessing:b,isNewResourceTranscoding:h,isNewResourceMuting:v,isElementTrimming:y,isCurrentResourceUploading:D,isCurrentResourceTranscoding:N,isCurrentResourceMuting:j,isCurrentResourceTrimming:O,canTranscodeResource:V},actions:{addItem:L,removeItem:_,finishItem:x}}=d(),{isTranscodingEnabled:A,canTranscodeFile:B,isFileTooLarge:k}=u(),z=e();z.current=m,r((()=>{T("upload",I)}),[I,T]),r((()=>{const e=Boolean(t.getItemByKey(l));w&&e&&U({message:__("Video optimization in progress","web-stories"),dismissible:!0})}),[w,U]),r((()=>{const e=F.filter((e=>{let{resource:{id:r}}=e;return!z.current.find((e=>{let{id:o}=e;return o===r}))}));if(!e.length)return;for(const{onUploadStart:r,resource:o}of e)r&&r({resource:o});const r=e.map((e=>{let{resource:r}=e;return r}));g({media:r})}),[F,g]),r((()=>{for(const{onUploadProgress:e,resource:r}of M){const{id:o}=r;r&&(p({id:o,data:r}),e&&e({id:o,resource:r}))}}),[M,p]),r((()=>{for(const{id:e,resource:r,onUploadSuccess:o,previousResourceId:s}of P){const{id:i}=r;r&&(p({id:i,data:r}),s&&p({id:s,data:r}),o&&(o({id:i,resource:r}),s&&o({id:s,resource:r})),x({id:e}))}}),[P,p,x]),r((()=>{for(const{id:e}of E)_({id:e})}),[E,_]),r((()=>{for(const{id:e,onUploadError:r,error:o,resource:s}of C){const{id:i}=s;r&&r({id:i}),f({id:i}),_({id:e});const t=s&&["video","gif"].includes(s.type)?s.poster:s.src;U({message:o?.message||__("File could not be uploaded. Please try a different file.","web-stories"),thumbnail:t&&{src:t,alt:s?.alt},dismissible:!0})}}),[C,f,_,U]);const G=o((async function(e){let{onUploadStart:r,onUploadProgress:o,onUploadError:s,onUploadSuccess:i,additionalData:t,muteVideo:n,trimData:a,resource:d,posterFile:u,originalResourceId:l,elementId:m}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};e?.length&&await Promise.all(e.reverse().map((async e=>{const g=A&&B(e),p=g&&k(e);try{R(e,g,p)}catch(e){return void U({message:e.message,dismissible:!0})}if(!d||!u){const{resource:r,posterFile:o}=await c(e);u=o,d=r}L({file:e,resource:d,onUploadStart:r,onUploadProgress:o,onUploadError:s,onUploadSuccess:i,additionalData:t,posterFile:u,muteVideo:n,trimData:a,originalResourceId:l,elementId:m})})))}),[U,R,L,B,A,k]);return{uploadMedia:G,isUploading:I,isTranscoding:w,isNewResourceProcessing:S,isCurrentResourceProcessing:b,isNewResourceTranscoding:h,isNewResourceMuting:v,isElementTrimming:y,isCurrentResourceUploading:D,isCurrentResourceTranscoding:N,isCurrentResourceMuting:j,isCurrentResourceTrimming:O,canTranscodeResource:V}}export{m as default};
