/**
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import{v4 as e}from"uuid";import{useMemo as t,useCallback as o}from"@googleforcreators/react";import{getTimeTracker as r,trackError as i}from"@googleforcreators/tracking";import{getFileName as a,blobToFile as n,getExtensionFromMimeType as s}from"@googleforcreators/media";import"react";import"prop-types";import"../../config/context.js";import c from"../../config/useConfig.js";import"@googleforcreators/templates";import"../../api/context.js";import"../../currentUser/context.js";import l from"../../currentUser/useCurrentUser.js";import"../../../constants/fonts.js";import{MEDIA_TRANSCODING_MAX_FILE_SIZE as m,MEDIA_POSTER_IMAGE_FILE_TYPE as f,MEDIA_POSTER_IMAGE_MIME_TYPE as d,MEDIA_TRANSCODED_FILE_TYPE as p,MEDIA_TRANSCODED_MIME_TYPE as g,MEDIA_VIDEO_DIMENSIONS_THRESHOLD as u}from"../../../constants/media.js";import"../../../constants/multipleValue.js";import{TRANSCODABLE_MIME_TYPES as _}from"../constants.js";import y from"./getPosterName.js";const w="undefined"!=typeof WEB_STORIES_ENV&&"development"===WEB_STORIES_ENV,E=e=>{let{size:t}=e;return t>=m},F={CODEC:["-vcodec","libx264"],SCALE:["-vf",`scale='min(${u.WIDTH},iw)':'min(${u.HEIGHT},ih)':'force_original_aspect_ratio=decrease',pad='width=ceil(iw/2)*2:height=ceil(ih/2)*2'`],FPS:["-r","24"],FASTSTART:["-movflags","+faststart"],COLOR_PROFILE:["-pix_fmt","yuv420p"],PRESET:["-preset","fast"],SEEK_TO_START:["-ss","00:00:01.000"],SINGLE_FRAME:["-frames:v","1"]},S=[...F.CODEC,...F.SCALE,...F.FPS,...F.FASTSTART,...F.COLOR_PROFILE,...F.PRESET];function h(){const{ffmpegCoreUrl:m,capabilities:{hasUploadMediaAction:u}}=c(),{currentUser:h}=l((e=>{let{state:t}=e;return{currentUser:t.currentUser}})),T=Boolean(window?.crossOriginIsolated),v=o((async e=>{const{createFFmpeg:t,fetchFile:o}=await import("@ffmpeg/ffmpeg"),r=t({corePath:m,log:w});return await r.load(),r.FS("writeFile",e.name,await o(e)),r}),[m]),O=o((async t=>{const o=r("load_video_poster_ffmpeg");let s;try{s=await v(t);const r=e()+"."+f,i=a(t),c=y(i);await s.run(...F.SEEK_TO_START,"-i",t.name,...F.SINGLE_FRAME,...F.SCALE,...F.COLOR_PROFILE,...F.PRESET,r);const l=s.FS("readFile",r);return n(new Blob([l.buffer],{type:d}),c,d)}catch(e){throw console.error(e),i("video_poster_generation_ffmpeg",e.message),e}finally{try{s.exit()}catch{}o()}}),[v]),R=o((async t=>{const o=r("load_video_transcoding");let s;try{s=await v(t);const r=e()+"."+p,i=a(t)+"."+p;await s.run("-i",t.name,...S,r);const c=s.FS("readFile",r);return n(new Blob([c.buffer],{type:g}),i,g)}catch(e){throw console.error(e),i("video_transcoding",e.message),e}finally{try{s.exit()}catch{}o()}}),[v]),b=o((async(t,o,c)=>{const l=r("load_trim_video_transcoding");let m;try{m=await v(t);const r=t?.type||g,i=s(r),f=e()+"."+i,d=a(t)+"-trimmed."+i;await m.run("-i",t.name,"-ss",o,"-to",c,f);const p=m.FS("readFile",f);return n(new Blob([p.buffer],{type:r}),d,r)}catch(e){throw console.log(e),i("trim_video_transcoding",e.message),e}finally{try{m.exit()}catch{}l()}}),[v]),A=o((async t=>{const o=r("load_mute_video_transcoding");let c;try{c=await v(t);const r=t?.type||g,i=s(r),l=e()+"."+i,m=a(t)+"-muted."+i;await c.run("-i",t.name,"-vcodec","copy","-an",l);const f=c.FS("readFile",l);return n(new Blob([f.buffer],{type:r}),m,r)}catch(e){throw console.log(e),i("mute_video_transcoding",e.message),e}finally{try{c.exit()}catch{}o()}}),[v]),C=o((async t=>{const o=r("load_gif_conversion");let s;try{s=await v(t);const r=e()+"."+p,i=a(t)+"."+p;await s.run("-i",t.name,...S,r);const c=s.FS("readFile",r);return new n(new Blob([c.buffer],{type:g}),i,g)}catch(e){throw console.error(e),i("gif_conversion",e.message),e}finally{try{s.exit()}catch(e){}o()}}),[v]),L=o((e=>_.includes(e.type)),[]),x=Boolean(h?.mediaOptimization),j=u&&x&&T;return t((()=>({isTranscodingEnabled:j,canTranscodeFile:L,isFileTooLarge:E,transcodeVideo:R,stripAudioFromVideo:A,getFirstFrameOfVideo:O,convertGifToVideo:C,trimVideo:b})),[j,L,R,A,O,C,b])}export{h as default};
