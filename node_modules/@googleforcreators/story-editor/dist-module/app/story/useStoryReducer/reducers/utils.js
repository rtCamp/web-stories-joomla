/**
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import{LAYER_DIRECTIONS as t}from"../../../../constants/index.js";import{ELEMENT_RESERVED_PROPERTIES as e}from"../types.js";import n from"../../../../utils/objectWithout.js";export{default as objectWithout}from"../../../../utils/objectWithout.js";function r(t){for(var e=arguments.length,n=new Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];return t&&n?.length?n.reduce(((t,e)=>t.filter((t=>e.includes(t)))),t):t}function i(t,e,n){return t>=e&&t<=n}function o(t,e,n){const r=t[e],i=[...t.slice(0,e),...t.slice(e+1)];return[...i.slice(0,n),r,...i.slice(n)]}function u(e){let{currentPosition:n,minPosition:r,maxPosition:i,desiredPosition:o}=e;if("number"==typeof o)return Math.min(i,Math.max(r,o));if("string"!=typeof o)return n;switch(o){case t.FRONT:return i;case t.BACK:return r;case t.FORWARD:return Math.min(i,n+1);case t.BACKWARD:return Math.max(r,n-1);default:return n}}function c(t,r){const i="function"==typeof r?r(t):r,o=n(i,e);return 0===Object.keys(o).length?t:{...t,...o}}function s(t,e){return(t||[]).reduce(((t,n)=>e.some((t=>n.targets?.includes(t)))?t:[...t,n]),[])}function l(t,e){const n=t.reduce(((t,n)=>{const r=e[n.id];return delete e[n.id],r?.delete?t:r?[...t,r]:[...t,n]}),[]);return Object.values(e).forEach((t=>n.push(t))),n}function f(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];return Object.values(Object.fromEntries(t.map((t=>[t.id,t]))))}function a(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];const n=f(e),r=t.map((t=>{let{id:e}=t;return e}));return n.filter((t=>{let{id:e}=t;return!r.includes(e)}))}export{a as exclusion,u as getAbsolutePosition,r as intersect,i as isInsideRange,o as moveArrayElement,s as removeAnimationsWithElementIds,f as removeDuplicates,l as updateAnimations,c as updateElementWithUpdater};
