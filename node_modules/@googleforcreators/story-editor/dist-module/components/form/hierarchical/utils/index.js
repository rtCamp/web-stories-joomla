/**
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const t=function(n){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return e.map((e=>{const o=n[e.id];return{...e,options:o&&o.length?t(n,o):[]}}))},n=n=>{const e=n.map((t=>({options:[],parent:0,...t}))),o=(r="parent",e.reduce(((t,n)=>(t[n[r]]?t[n[r]].push(n):t[n[r]]=[n],t)),{}));var r;return t(o,o[0])},e=function(t){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";const{options:o,...r}=t;let l=[];if(o)for(let t=0;t<o.length;t++)l=l.concat(e(o[t],n));const i=t.label.toLowerCase().includes(n.trim().toLowerCase()),c={...r,options:l};return i||l.length?[c]:[]},o=(t,n)=>t.reduce(((t,o)=>t.concat(e(o,n))),[]);function r(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return t.flatMap((t=>{let{options:e,...o}=t;return[{...o,$level:n},...r(e,n+1)]}))}function l(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";const l=n(t),i=o(l,e);return r(i)}export{n as buildOptionsTree,e as filterOption,o as filterOptionsByLabelText,l as makeFlatOptionTree};
