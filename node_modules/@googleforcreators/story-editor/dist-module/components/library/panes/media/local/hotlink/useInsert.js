/**
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import{useMemo as e,useState as t,useCallback as o}from"@googleforcreators/react";import{__,sprintf,translateToExclusiveList as i}from"@googleforcreators/i18n";import{getExtensionsFromMimeType as r,preloadVideo as s,seekVideo as a,getVideoLength as p,hasVideoGotAudio as m,getImageFromVideo as n}from"@googleforcreators/media";import{v4 as l}from"uuid";import{trackEvent as c,trackError as d}from"@googleforcreators/tracking";import f from"../../../../useLibrary.js";import g from"../../../../../../app/media/utils/getResourceFromUrl.js";import"../../../../../../constants/fonts.js";import"../../../../../../constants/multipleValue.js";import u from"../../../../../../app/media/utils/getPosterName.js";import"../../../../../../app/media/media3p/providerConfiguration.js";import"react";import"prop-types";import"@googleforcreators/templates";import"../../../../../../app/config/context.js";import y from"../../../../../../app/config/useConfig.js";import"../../../../../../app/api/context.js";import h from"../../../../../../app/api/useAPI.js";import j from"../../../../../../app/media/utils/useUploadVideoFrame.js";import"../../../../../../app/media/utils/useFFmpeg.js";import w from"../../../../../../utils/useCORSProxy.js";import x from"../../../../../../app/media/utils/useDetectBaseColor.js";import{getErrorMessage as I,isValidUrlForHotlinking as k}from"./utils.js";function v(v){let{link:P,setLink:b,setErrorMsg:C,onClose:F}=v;const{insertElement:_}=f((e=>({insertElement:e.actions.insertElement}))),{capabilities:{hasUploadMediaAction:E},allowedMimeTypes:{image:M,vector:T,video:U}}=y(),A=e((()=>[...M,...T,...U]),[M,T,U]),N=e((()=>A.map((e=>r(e))).flat()),[A]),{actions:{getHotlinkInfo:R}}=h(),{updateBaseColor:V}=x({}),[z,B]=t(!1),{uploadVideoPoster:H}=j({}),{getProxiedUrl:L,checkResourceAccess:S}=w(),D=o((async(e,t)=>{const{ext:o,type:i,mimeType:r,fileName:c}=e,d="video"===i;try{const e=t?L({needsProxy:t},P):P,f={id:l(),src:e,mimeType:r,needsProxy:t,alt:c};if(d){const t=await s(e);await a(t),f.width=t.videoWidth,f.height=t.videoHeight;const i=p(t);if(f.length=i.length,f.lengthFormatted=i.lengthFormatted,f.isMuted=!m(t),E)try{const e=u(c.replace(`.${o}`,"")),i=await n(t),r=await H(0,e,i);f.poster=r.poster,f.posterId=r.posterId}catch{}}const y=await g(f);y.src=P,_(i,{resource:y}),V(y),C(null),b(""),F()}catch(e){C(I())}finally{B(!1)}}),[E,_,P,F,C,b,H,L,V]);return{onInsert:o((async()=>{if(P)if(k(P)){B(!0);try{const e=await R(P),t=await S(P);c("hotlink_media",{event_label:P,file_size:e.fileSize,file_type:e.mimeType,needs_proxy:t}),await D(e,t)}catch(e){B(!1),d("hotlink_media",e?.message);let t=__("No file types are currently supported.","web-stories");N.length&&(t=sprintf(
/* translators: %s is a list of allowed file extensions. */
__("You can insert %s.","web-stories"),i(N))),C(I(e.code,t))}}else C(__("Invalid link.","web-stories"))}),[N,P,R,C,D,S]),isInserting:z,setIsInserting:B}}export{v as default};
