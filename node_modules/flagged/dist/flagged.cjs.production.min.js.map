{"version":3,"file":"flagged.cjs.production.min.js","sources":["../src/index.tsx"],"sourcesContent":["import * as React from 'react';\n\ntype FeatureGroup = {\n  [featureName: string]: boolean | FeatureGroup;\n};\n\nexport type FeatureFlags = string[] | FeatureGroup;\n\nconst FeatureFlagsContext = React.createContext<FeatureGroup>({});\n\nfunction transformFlags(features: FeatureFlags) {\n  if (!Array.isArray(features)) return features;\n  return Object.fromEntries(features.map(feature => [feature, true]));\n}\n\nfunction mergeFeatures(a: FeatureGroup, b: FeatureGroup): FeatureGroup {\n  return { ...a, ...b };\n}\n\nexport function FlagsProvider({\n  features = {},\n  children,\n}: {\n  features?: FeatureFlags;\n  children: React.ReactNode;\n}) {\n  const currentFeatures = useFeatures();\n  return (\n    <FeatureFlagsContext.Provider\n      value={mergeFeatures(\n        transformFlags(currentFeatures),\n        transformFlags(features)\n      )}\n    >\n      {children}\n    </FeatureFlagsContext.Provider>\n  );\n}\n\n// Custom Hook API\nexport function useFeatures(): FeatureGroup {\n  return React.useContext(FeatureFlagsContext);\n}\n\n// Custom Hook API\nexport function useFeature(name: string): boolean | FeatureGroup {\n  const features = useFeatures();\n  if (Array.isArray(features)) return features.includes(name);\n  if (typeof features[name] === 'boolean') return features[name];\n  return name\n    .split('/')\n    .reduce<FeatureGroup | boolean>((featureGroup, featureName: string) => {\n      if (typeof featureGroup === 'boolean') return featureGroup;\n      if (featureGroup[featureName] === undefined) return false;\n      return featureGroup[featureName];\n    }, features);\n}\n\n// Render Prop API\nexport function Feature({\n  name,\n  children,\n  render = children,\n}: {\n  name: string;\n  children?:\n    | React.ReactNode\n    | ((hasFeature: boolean | FeatureGroup) => JSX.Element);\n  render?:\n    | React.ReactNode\n    | ((hasFeature: boolean | FeatureGroup) => JSX.Element);\n}) {\n  const hasFeature = useFeature(name);\n  if (typeof render === 'function') return render(hasFeature);\n  if (!hasFeature) return null;\n  return render;\n}\n\n// High Order Component API\nexport function withFeature(featureName: string) {\n  return (Component: Function) => (props: React.ComponentProps<any>) => {\n    return (\n      <Feature name={featureName}>\n        <Component {...props} />\n      </Feature>\n    );\n  };\n}\n"],"names":["FeatureFlagsContext","React","transformFlags","features","Array","isArray","Object","fromEntries","map","feature","useFeatures","useFeature","name","includes","split","reduce","featureGroup","featureName","undefined","Feature","render","children","hasFeature","a","b","currentFeatures","Provider","value","Component","props"],"mappings":"0SAQA,IAAMA,EAAsBC,gBAAkC,IAE9D,SAASC,EAAeC,UACjBC,MAAMC,QAAQF,GACZG,OAAOC,YAAYJ,EAASK,KAAI,SAAAC,SAAW,CAACA,GAAS,OADvBN,WA6BvBO,WACPT,aAAiBD,YAIVW,EAAWC,OACnBT,EAAWO,WACbN,MAAMC,QAAQF,GAAkBA,EAASU,SAASD,GACxB,kBAAnBT,EAASS,GAA4BT,EAASS,GAClDA,EACJE,MAAM,KACNC,QAA+B,SAACC,EAAcC,SACjB,kBAAjBD,EAAmCA,OACZE,IAA9BF,EAAaC,IACVD,EAAaC,KACnBd,YAISgB,aAGdC,OAAAA,eADAC,WAWMC,EAAaX,IAZnBC,YAasB,mBAAXQ,EAA8BA,EAAOE,GAC3CA,EACEF,EADiB,6DA3DHG,EAAiBC,MAKtCrB,SAAAA,aAAW,KACXkB,IAAAA,SAKMI,EAAkBf,WAEtBT,gBAACD,EAAoB0B,UACnBC,OAdiBJ,EAefrB,EAAeuB,GAfiBD,EAgBhCtB,EAAeC,QAfToB,EAAMC,KAkBbH,4EA6CqBJ,UACnB,SAACW,UAAwB,SAACC,UAE7B5B,gBAACkB,GAAQP,KAAMK,GACbhB,gBAAC2B,mBAAcC"}