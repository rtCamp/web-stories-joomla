import { useContext, createElement, createContext } from 'react';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var FeatureFlagsContext = /*#__PURE__*/createContext({});

function transformFlags(features) {
  if (!Array.isArray(features)) return features;
  return Object.fromEntries(features.map(function (feature) {
    return [feature, true];
  }));
}

function mergeFeatures(a, b) {
  return _extends({}, a, b);
}

function FlagsProvider(_ref) {
  var _ref$features = _ref.features,
      features = _ref$features === void 0 ? {} : _ref$features,
      children = _ref.children;
  var currentFeatures = useFeatures();
  return createElement(FeatureFlagsContext.Provider, {
    value: mergeFeatures(transformFlags(currentFeatures), transformFlags(features))
  }, children);
} // Custom Hook API

function useFeatures() {
  return useContext(FeatureFlagsContext);
} // Custom Hook API

function useFeature(name) {
  var features = useFeatures();
  if (Array.isArray(features)) return features.includes(name);
  if (typeof features[name] === 'boolean') return features[name];
  return name.split('/').reduce(function (featureGroup, featureName) {
    if (typeof featureGroup === 'boolean') return featureGroup;
    if (featureGroup[featureName] === undefined) return false;
    return featureGroup[featureName];
  }, features);
} // Render Prop API

function Feature(_ref2) {
  var name = _ref2.name,
      children = _ref2.children,
      _ref2$render = _ref2.render,
      render = _ref2$render === void 0 ? children : _ref2$render;
  var hasFeature = useFeature(name);
  if (typeof render === 'function') return render(hasFeature);
  if (!hasFeature) return null;
  return render;
} // High Order Component API

function withFeature(featureName) {
  return function (Component) {
    return function (props) {
      return createElement(Feature, {
        name: featureName
      }, createElement(Component, Object.assign({}, props)));
    };
  };
}

export { Feature, FlagsProvider, useFeature, useFeatures, withFeature };
//# sourceMappingURL=flagged.esm.js.map
