import { MouseEvent, ImgHTMLAttributes, ReactElement, HTMLAttributes, PropsWithChildren, RefCallback, ForwardRefExoticComponent, RefAttributes } from 'react';

declare type LayoutType = "columns" | "rows" | "masonry";
declare type ClickHandler<T extends Photo = Photo> = (event: MouseEvent, photo: T, index: number) => void;
declare type ResponsiveParameterProvider = (containerWidth: number) => number;
declare type ResponsiveParameter = number | ResponsiveParameterProvider;
declare type ResponsiveSizes = {
    size: string;
    sizes?: {
        viewport: string;
        size: string;
    }[];
};
interface Image {
    src: string;
    width: number;
    height: number;
}
interface Photo extends Image {
    key?: string;
    alt?: string;
    title?: string;
    images?: Image[];
}
declare type PhotoLayout = {
    width: number;
    height: number;
    index: number;
    photoIndex: number;
    photosCount: number;
};
declare type PhotoProps<T extends Photo = Photo> = {
    photo: T;
    layout: PhotoLayout;
    layoutOptions: LayoutOptions<T>;
    imageProps: ImgHTMLAttributes<HTMLImageElement> & Required<Pick<ImgHTMLAttributes<HTMLImageElement>, "src" | "alt" | "style">>;
};
declare type PhotoAlbumProps<T extends Photo = Photo> = {
    photos: Array<T>;
    layout: LayoutType;
    columns?: ResponsiveParameter;
    spacing?: ResponsiveParameter;
    padding?: ResponsiveParameter;
    targetRowHeight?: ResponsiveParameter;
    rowConstraints?: RowConstraints;
    sizes?: ResponsiveSizes;
    onClick?: ClickHandler<T>;
    breakpoints?: number[];
    defaultContainerWidth?: number;
    componentsProps?: ComponentsPropsParameter;
    renderPhoto?: RenderPhoto<T>;
    renderContainer?: RenderContainer<T>;
    renderRowContainer?: RenderRowContainer<T>;
    renderColumnContainer?: RenderColumnContainer<T>;
    resizeObserverProvider?: ResizeObserverProvider;
    instrumentation?: Instrumentation;
};
declare type RenderPhoto<T extends Photo = Photo> = (props: PhotoProps<T>) => ReactElement;
declare type GenericLayoutOptions<T extends Photo = Photo> = {
    spacing: number;
    padding: number;
    containerWidth: number;
    viewportWidth?: number;
    onClick?: ClickHandler<T>;
    sizes?: ResponsiveSizes;
};
declare type RowsLayoutOptions<T extends Photo = Photo> = GenericLayoutOptions<T> & {
    layout: Extract<LayoutType, "rows">;
    targetRowHeight: number;
    rowConstraints?: RowConstraints;
};
declare type ColumnsLayoutOptions<T extends Photo = Photo> = GenericLayoutOptions<T> & {
    layout: Extract<LayoutType, "columns" | "masonry">;
    columns: number;
};
declare type LayoutOptions<T extends Photo = Photo> = ColumnsLayoutOptions<T> | RowsLayoutOptions<T>;
declare type ComponentsProps = {
    containerProps?: HTMLAttributes<HTMLDivElement>;
    rowContainerProps?: HTMLAttributes<HTMLDivElement>;
    columnContainerProps?: HTMLAttributes<HTMLDivElement>;
    imageProps?: HTMLAttributes<HTMLImageElement>;
};
declare type ComponentsPropsParameter = ComponentsProps | ((containerWidth: number) => ComponentsProps);
declare type ContainerProps<T extends Photo = Photo> = {
    layoutOptions: LayoutOptions<T>;
    containerProps: HTMLAttributes<HTMLDivElement>;
};
declare type RenderContainerProps<T extends Photo = Photo> = PropsWithChildren<ContainerProps<T>> & {
    containerRef?: RefCallback<HTMLDivElement>;
};
declare type RenderContainer<T extends Photo = Photo> = ((props: RenderContainerProps<T>) => ReactElement) | ForwardRefExoticComponent<PropsWithChildren<ContainerProps<T>> & RefAttributes<HTMLDivElement>>;
declare type RowContainerProps<T extends Photo = Photo> = {
    layoutOptions: RowsLayoutOptions<T>;
    rowIndex: number;
    rowsCount: number;
    rowContainerProps: HTMLAttributes<HTMLDivElement>;
};
declare type RenderRowContainer<T extends Photo = Photo> = (props: PropsWithChildren<RowContainerProps<T>>) => ReactElement;
declare type ColumnContainerProps<T extends Photo = Photo> = {
    layoutOptions: ColumnsLayoutOptions<T>;
    columnIndex: number;
    columnsCount: number;
    columnsGaps?: number[];
    columnsRatios?: number[];
    columnContainerProps: HTMLAttributes<HTMLDivElement>;
};
declare type RenderColumnContainer<T extends Photo = Photo> = (props: PropsWithChildren<ColumnContainerProps<T>>) => ReactElement;
declare type ResizeObserverProvider = (callback: (entries: ResizeObserverEntry[], observer: ResizeObserver) => void) => ResizeObserver;
declare type RowConstraints = {
    minPhotos?: number;
    maxPhotos?: number;
};
declare type Instrumentation = {
    fullGraphSearch?: boolean;
    onStartLayoutComputation?: () => void;
    onFinishLayoutComputation?: (...params: any) => void;
};

declare const PhotoAlbum: <T extends Photo>(props: PhotoAlbumProps<T>) => JSX.Element;

export { ClickHandler, ColumnContainerProps, ColumnsLayoutOptions, ComponentsProps, ComponentsPropsParameter, ContainerProps, GenericLayoutOptions, Image, Instrumentation, LayoutOptions, LayoutType, Photo, PhotoAlbum, PhotoAlbumProps, PhotoLayout, PhotoProps, RenderColumnContainer, RenderContainer, RenderContainerProps, RenderPhoto, RenderRowContainer, ResizeObserverProvider, ResponsiveParameter, ResponsiveParameterProvider, ResponsiveSizes, RowConstraints, RowContainerProps, RowsLayoutOptions, PhotoAlbum as default };
